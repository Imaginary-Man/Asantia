<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI init
d_width=display_get_width()
d_height=display_get_height()
movewith=0
dragitem=0
dragstack=0
dragsprite=0
drag=false
oldslot=0
oldslotid=0
//ui_windows
show_inventory=false
show_stats=false
//inventory
inv_create()
item_init()
init_mainhand()
init_offhand()
init_helm()
init_necklace()
init_ring_zero()
init_ring_one()
init_gem_zero()
init_gem_one()
init_gem_two()
init_gem_three()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>-100</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///test items
item_add(0,1,round(random_range(0,11)))
item_add(7,1,round(random_range(0,11)))
item_add(8,1,round(random_range(0,11)))
item_add(4,1,round(random_range(0,11)))
item_add(2,1,round(random_range(0,11)))
item_add(1,1,round(random_range(0,11)))

item_add(3,1,round(random_range(0,11)))
item_add(3,1,round(random_range(0,11)))
item_add(3,1,round(random_range(0,11)))
item_add(3,1,round(random_range(0,11)))

item_add(5,1,round(random_range(0,11)))

item_add(6,1,round(random_range(0,10)))
item_add(6,1,round(random_range(0,10)))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///visible
visible=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI keys
if keyboard_check_pressed(global.key_inventory)
{
 show_inventory=!show_inventory
}

if keyboard_check_pressed(global.key_stats)
{
 show_stats=!show_stats
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movewith
movewith=obj_helmet.movewith
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inventory
inv_step()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///equip
itembonus_step()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="34">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.ui_size</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-0.1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="33">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.ui_size</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI:general
////////////////////
//UI border
if global.ui_border=true
{
 draw_set_color(make_color_rgb(142,93,28))
 draw_rectangle(0,display_get_height()-(global.border_size*global.ui_size),display_get_width(),display_get_height(),0)
 draw_rectangle(0,(global.border_size*global.ui_size),display_get_width(),0,0)
 draw_set_color(make_color_rgb(120,80,20))
 draw_rectangle(0,display_get_height()-(global.border_size*global.ui_size),display_get_width(),display_get_height(),1)
 draw_rectangle(0,(global.border_size*global.ui_size),display_get_width(),0,1)
}

///basic UI 
draw_sprite_ext(ui_normal_1,-1,display_get_width()/2,display_get_height(),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_normal_1_exp,100*(global.xp/global.mxp),display_get_width()/2,display_get_height(),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_normal_1_health,100*(global.hp/global.f_mhp),display_get_width()/2,display_get_height(),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_normal_1_mana,100*(global.sp/global.f_msp),display_get_width()/2,display_get_height(),global.ui_size,global.ui_size,0,c_white,1)



///level
draw_set_font(global.counterfont)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_text_transformed(display_get_width()/2-(3*global.ui_size),display_get_height()-33*global.ui_size,global.level,global.ui_size,global.ui_size,0)


///draw health and mana in value
if global.ui_hpvalue=true
{
 draw_set_font(global.normalfont)
 draw_set_color(c_white)
 draw_set_halign(fa_center)
 draw_text_transformed((display_get_width()/2)-(70*global.ui_size),display_get_height()-18*global.ui_size,"/",global.ui_size,global.ui_size,0)
 draw_set_color(make_color_rgb(255,50,50))
 draw_set_halign(fa_right)
 draw_text_transformed((display_get_width()/2)-(75*global.ui_size),display_get_height()-18*global.ui_size,round(global.hp),global.ui_size,global.ui_size,0)
 draw_set_halign(fa_left)
 draw_text_transformed((display_get_width()/2)-(65*global.ui_size),display_get_height()-18*global.ui_size,round(global.f_mhp),global.ui_size,global.ui_size,0)
}
//sp
if global.ui_spvalue=true
{
 draw_set_font(global.normalfont)
 draw_set_color(c_white)
 draw_set_halign(fa_center)
 draw_text_transformed((display_get_width()/2)+(70*global.ui_size),display_get_height()-18*global.ui_size,"/",global.ui_size,global.ui_size,0)
 draw_set_color(make_color_rgb(72,188,255))
 draw_set_halign(fa_left)
 draw_text_transformed((display_get_width()/2)+(75*global.ui_size),display_get_height()-18*global.ui_size,round(global.f_msp),global.ui_size,global.ui_size,0)
 draw_set_halign(fa_right)
 draw_text_transformed((display_get_width()/2)+(65*global.ui_size),display_get_height()-18*global.ui_size,round(global.sp),global.ui_size,global.ui_size,0)
}

///FPS
draw_set_font(global.normalfont)
draw_set_color(c_white)
draw_set_halign(fa_right)
draw_set_valign(fa_top)
draw_text_transformed(display_get_width(),0,fps,global.ui_size,global.ui_size,0)
draw_set_color(c_black)


///UI bottombar buttons
draw_sprite_ext(ui_options_icon,ui_select_image_index(d_width-(global.ui_size*15),d_height-(global.ui_size*10)),d_width-(global.ui_size*15),d_height-(global.ui_size*10),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_mail_icon,ui_select_image_index(d_width-(global.ui_size*35),d_height-(global.ui_size*10)),d_width-(global.ui_size*35),d_height-(global.ui_size*10),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_clans_icon,ui_select_image_index(d_width-(global.ui_size*55),d_height-(global.ui_size*10)),d_width-(global.ui_size*55),d_height-(global.ui_size*10),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_social_icon,ui_select_image_index(d_width-(global.ui_size*75),d_height-(global.ui_size*10)),d_width-(global.ui_size*75),d_height-(global.ui_size*10),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_player_icon,ui_select_image_index(d_width-(global.ui_size*95),d_height-(global.ui_size*10)),d_width-(global.ui_size*95),d_height-(global.ui_size*10),global.ui_size,global.ui_size,0,c_white,1)
draw_sprite_ext(ui_inventory_icon,ui_select_image_index(d_width-(global.ui_size*115),d_height-(global.ui_size*10)),d_width-(global.ui_size*115),d_height-(global.ui_size*10),global.ui_size,global.ui_size,0,c_white,1)
































































</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI:stats
if show_stats=true
{
 draw_sprite_ext(ui_stats,0,(global.ui_size*70),d_height-(d_height/2),global.ui_size,global.ui_size,0,c_white,1)
 draw_sprite_ext(ui_stats_xp_bar,100*(global.xp/global.mxp),(global.ui_size*70),d_height-(d_height/2),global.ui_size,global.ui_size,0,c_white,1)
 draw_set_color(c_black)
 draw_set_alpha(0.2)
 draw_ellipse((global.ui_size*70)-((12*global.ui_size)+movewith),d_height-((d_height/2)+global.ui_size*40)-global.ui_size*3,(global.ui_size*70)+((12*global.ui_size)+movewith),d_height-((d_height/2)+global.ui_size*40)+global.ui_size*3,0)
 draw_set_alpha(1)
 draw_sprite_ext(obj_player.sprite_index,obj_player.image_index,global.ui_size*70,d_height-((d_height/2)+global.ui_size*46),global.ui_size,global.ui_size,0,global.playercolor,global.playeralpha)
 draw_sprite_ext(spr_eyes,global.player_eyes,global.ui_size*70,d_height-((d_height/2)+global.ui_size*46)+movewith*global.ui_size,global.ui_size,global.ui_size,0,c_white,1)
 draw_sprite_ext(obj_helmet.sprite_index,obj_helmet.image_index,global.ui_size*70,d_height-((d_height/2)+global.ui_size*46)+movewith*global.ui_size,global.ui_size,global.ui_size,0,c_white,1)
 
 //////////stats &amp; numbers
 //stats
 draw_set_color(c_black)
 draw_set_font(ui_stats_font)
 draw_set_valign(fa_top)
 draw_set_halign(fa_left)
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)-27*global.ui_size,"Str",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)-19.5*global.ui_size,"Agi",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)-12*global.ui_size,"Sta",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)-4.5*global.ui_size,"Dex",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)+3*global.ui_size,"Char",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)+10.5*global.ui_size,"Int",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)+18*global.ui_size,"Wis",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)+25.5*global.ui_size,"Will",global.ui_size/3,global.ui_size/3,0) 
 // 
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)+36*global.ui_size,"AD",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*28),d_height-(d_height/2)+43.5*global.ui_size,"AP",global.ui_size/3,global.ui_size/3,0) 
 //
 draw_text_transformed((global.ui_size*27),d_height-(d_height/2)+55*global.ui_size,"Movespeed",global.ui_size/3,global.ui_size/3,0)
 //////
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)-27*global.ui_size,"Armor",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)-19.5*global.ui_size,"Resist",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)-12*global.ui_size,"AR",global.ui_size/3,global.ui_size/3,0) 
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)-4.5*global.ui_size,"AS",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)+3*global.ui_size,"Crit+",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)+10.5*global.ui_size,"Critx",global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)+18*global.ui_size,"CDR",global.ui_size/3,global.ui_size/3,0)      
 draw_text_transformed((global.ui_size*64),d_height-(d_height/2)+25.5*global.ui_size,"CT",global.ui_size/3,global.ui_size/3,0)
  
 //numbers
 draw_set_color(c_white)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)-27*global.ui_size,round(global.f_str),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)-19.5*global.ui_size,round(global.f_agi),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)-12*global.ui_size,round(global.f_sta),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)-4.5*global.ui_size,round(global.f_dex),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)+3*global.ui_size,round(global.f_char),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)+10.5*global.ui_size,round(global.f_int),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)+18*global.ui_size,round(global.f_wis),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*44),d_height-(d_height/2)+25.5*global.ui_size,round(global.f_will),global.ui_size/3,global.ui_size/3,0)
 //
 draw_text_transformed((global.ui_size*39),d_height-(d_height/2)+36*global.ui_size,round(global.f_ad),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*39),d_height-(d_height/2)+43.5*global.ui_size,round(global.f_ap),global.ui_size/3,global.ui_size/3,0)
 //
 draw_set_halign(fa_middle)
 draw_text_transformed((global.ui_size*42),d_height-(d_height/2)+65*global.ui_size,global.f_mspeed,global.ui_size/3,global.ui_size/3,0)
 draw_set_halign(fa_left)
 //////
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)-27*global.ui_size,round(global.f_armor),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)-19.5*global.ui_size,round(global.f_resist),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)-12*global.ui_size,round(global.f_attackrange),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)-4.5*global.ui_size,global.f_attackspeed,global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)+3*global.ui_size,global.f_critchance,global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)+10.5*global.ui_size,global.f_critmultiplier,global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)+18*global.ui_size,round(global.f_cooldown),global.ui_size/3,global.ui_size/3,0)
 draw_text_transformed((global.ui_size*88),d_height-(d_height/2)+25.5*global.ui_size,global.f_casttime,global.ui_size/3,global.ui_size/3,0)
 // 
 
 draw_set_color(c_black)
 
 
 ////////mouse over stats
 draw_set_alpha(0.8)
 draw_set_color(c_black)
 draw_set_valign(fa_top)
 draw_set_halign(fa_left) 
  //strengt
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)-27*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+117*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Strengt increases physical damage output",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 }
  //agility
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)-19.5*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+106*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Agility boosts total basic attack speed",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 } 
  //stamina
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)-12*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+79*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Stamina boosts total Health",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 } 
  //dexterity
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)-4.5*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+107*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Dexterity increases critical hit chances",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 }  
  //charisma
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+3*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+107*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Charisma decreases ability cooldowns",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 }  
  //Intellect
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+10.5*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+115*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Intellect increases ability damage output",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 }  
  //wisdom
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+18*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+77*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Wisdom boosts total Mana",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 } 
  //will
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+25.5*global.ui_size,15*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+69*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Will decreases cast time",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 } 
 
 //
  //AD
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+36*global.ui_size,9*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+112*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Attack Damage is total physical damage",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 } 
  //AP
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+43.5*global.ui_size,9*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+102*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Ability Power is total ability damage",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1)
 }  
 //
  //movespeed
 if ui_select_stats((global.ui_size*28),d_height-(d_height/2)+55*global.ui_size,30*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+125*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Movespeed is equal to overal walking speed",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 }
 /////////
  //armor
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)-27*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+123*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Armor decreases incoming physical damage",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 }  
  //resist
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)-19.5*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+117*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Resist decreases incoming ability damage",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 } 
  //attack range
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)-12*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+117*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Attack Range is equal to basic attack area",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 } 
  //attack speed
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)-4.5*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+132*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Attack Speed is equal to basic attack quickness",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 } 
  //critical chance
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)+3*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+192*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Critical Chance is the total chance of having a critical basic attack hit",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 }  
  //critical multiplier
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)+10.5*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+153*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Critical Multiplier is the total multiplier of a critical hit",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 } 
  //cooldown reduction
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)+18*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+149*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Cooldown Reduction decreases cooldown of abilities",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 }  
  //casttime
 if ui_select_stats((global.ui_size*64),d_height-(d_height/2)+25.5*global.ui_size,22*global.ui_size)
 {
  draw_roundrect(window_mouse_get_x(),window_mouse_get_y(),window_mouse_get_x()+190*global.ui_size,window_mouse_get_y()-7*global.ui_size,0)
  draw_text_transformed_colour(window_mouse_get_x()+global.ui_size,window_mouse_get_y()-7.5*global.ui_size,"Cast Time decreases set amount of time needed for casting abilities",global.ui_size/3,global.ui_size/3,0,c_white,c_white,c_white,c_white,1) 
 }  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 //
 draw_set_alpha(1) 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI:inventory
if show_inventory=true
{
 draw_sprite_ext(ui_inventory,0,d_width-(global.ui_size*70),d_height-(d_height/2),global.ui_size,global.ui_size,0,c_white,1)
 for(i=0; i&lt;slots; i+=1)
 {
  if slot[i]=1
  { 
   draw_sprite_ext(item_rarity,slotid[i].rarity,slotx[i],sloty[i],global.ui_size,global.ui_size,0,c_white,1)
   draw_sprite_ext(slotid[i].sprite_index,-1,slotx[i]+1,sloty[i]+1,global.ui_size,global.ui_size,0,c_black,0.5)  
   draw_sprite_ext(slotid[i].sprite_index,-1,slotx[i],sloty[i],global.ui_size,global.ui_size,0,c_white,1)  
   if slotid[i].stack&gt;=2
   {
    draw_set_color(c_white)
    draw_set_font(global.normalfont)
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    draw_text_transformed(slotx[i]+global.ui_size*16,sloty[i]+global.ui_size*18,slotid[i].stack,global.ui_size/2,global.ui_size/2,0)
    draw_set_color(c_black)
   }
  }
 }
 for (n=0;n&lt;slots; n+=1)  
 {
  if slot[n]=1
  {
   if ui_select_inv(slotx[n],sloty[n])
   {
    if drag=false {ui_select_inv_info()}
   }  
  }
 }
 ///
 if i_mainhand!=0
 {
  draw_sprite_ext(item_rarity,i_mainhand.rarity,i_mainhandx,i_mainhandy,global.ui_size,global.ui_size,0,c_white,1)
  draw_sprite_ext(i_mainhand.sprite_index,-1,i_mainhandx+1,i_mainhandy+1,global.ui_size,global.ui_size,0,c_black,0.5) 
  draw_sprite_ext(i_mainhand.sprite_index,-1,i_mainhandx,i_mainhandy,global.ui_size,global.ui_size,0,c_white,1)
 }
  if i_offhand!=0
 {
  draw_sprite_ext(item_rarity,i_offhand.rarity,i_offhandx,i_offhandy,global.ui_size,global.ui_size,0,c_white,1)   
  draw_sprite_ext(i_offhand.sprite_index,-1,i_offhandx+1,i_offhandy+1,global.ui_size,global.ui_size,0,c_black,0.5)
  draw_sprite_ext(i_offhand.sprite_index,-1,i_offhandx,i_offhandy,global.ui_size,global.ui_size,0,c_white,1)
 }
 
  if i_necklace!=0
 {
  draw_sprite_ext(item_rarity,i_necklace.rarity,i_necklacex,i_necklacey,global.ui_size,global.ui_size,0,c_white,1)   
  draw_sprite_ext(i_necklace.sprite_index,-1,i_necklacex+1,i_necklacey+1,global.ui_size,global.ui_size,0,c_black,0.5)
  draw_sprite_ext(i_necklace.sprite_index,-1,i_necklacex,i_necklacey,global.ui_size,global.ui_size,0,c_white,1)
 } 
 
  if i_helm!=0
 {
  draw_sprite_ext(item_rarity,i_helm.rarity,i_helmx,i_helmy,global.ui_size,global.ui_size,0,c_white,1)   
  draw_sprite_ext(i_helm.sprite_index,-1,i_helmx+1,i_helmy+1,global.ui_size,global.ui_size,0,c_black,0.5)
  draw_sprite_ext(i_helm.sprite_index,-1,i_helmx,i_helmy,global.ui_size,global.ui_size,0,c_white,1)
 } 
 
 for(j=0; j&lt;=3; j+=1)
 {
  if i_gem[j]!=0
  {
   draw_sprite_ext(item_rarity,i_gem[j].rarity,i_gemx[j],i_gemy[j],global.ui_size,global.ui_size,0,c_white,1)   
   draw_sprite_ext(i_gem[j].sprite_index,-1,i_gemx[j]+1,i_gemy[j]+1,global.ui_size,global.ui_size,0,c_black,0.5)
   draw_sprite_ext(i_gem[j].sprite_index,-1,i_gemx[j],i_gemy[j],global.ui_size,global.ui_size,0,c_white,1)  
  }
 }
 
 for(o=0; o&lt;=1; o+=1)
 {
  if i_ring[o]!=0
  {
   draw_sprite_ext(item_rarity,i_ring[o].rarity,i_ringx[o],i_ringy[o],global.ui_size,global.ui_size,0,c_white,1)   
   draw_sprite_ext(i_ring[o].sprite_index,-1,i_ringx[o]+1,i_ringy[o]+1,global.ui_size,global.ui_size,0,c_black,0.5)
   draw_sprite_ext(i_ring[o].sprite_index,-1,i_ringx[o],i_ringy[o],global.ui_size,global.ui_size,0,c_white,1)
  }
 } 
 ////
 ui_equip()
 ui_unequip() 
 ui_inv_drag()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI:menu
if obj_options.menu=true
{
 draw_set_alpha(0.8)
 draw_set_color(c_black)
 draw_rectangle(0,0,display_get_width(),display_get_height(),0)
 draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI:clicking

//options
if ui_select_click(d_width-(global.ui_size*15),d_height-(global.ui_size*10),6)//options
{
 obj_options.menu=!obj_options.menu
}


//mail
if ui_select_click(d_width-(global.ui_size*35),d_height-(global.ui_size*10),6)//mail
{
 //
}

//stats
if ui_select_click(d_width-(global.ui_size*95),d_height-(global.ui_size*10),6)//stats
{
 show_stats=!show_stats
}

if show_stats=true//stats esc button
{
 if ui_select_click(global.ui_size*102,d_height-((d_height/2)+global.ui_size*80),4)
 {
  show_stats=false
 }
}

//inventory
if ui_select_click(d_width-(global.ui_size*115),d_height-(global.ui_size*10),6)//inventory
{
 show_inventory=!show_inventory
}

if show_inventory=true //inv esc button
{
 if ui_select_click(d_width-(global.ui_size*38),d_height-((d_height/2)+global.ui_size*80),4)
 {
  show_inventory=false
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
if global.debug=true
{
 draw_rectangle( d_width-(global.ui_size*119),
                 d_height-(d_height/2)-73*global.ui_size,
                 d_width-(global.ui_size*21),
                 d_height-(d_height/2)+84*global.ui_size,
                 1)

                                 
 draw_circle(window_mouse_get_x(),window_mouse_get_y(),6,1)
 
 draw_set_valign(fa_top)
 draw_set_halign(fa_left)
 draw_set_color(c_white)
 draw_text_transformed(0,0,window_mouse_get_x(),global.ui_size,global.ui_size,0)
 draw_text_transformed(0,20*global.ui_size,window_mouse_get_y(),global.ui_size,global.ui_size,0)
 draw_set_color(c_black)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse and dragging
if drag=true
{
 draw_sprite_ext(item_rarity,dragrarity,window_mouse_get_x()-12*global.ui_size,window_mouse_get_y()-12*global.ui_size,global.ui_size,global.ui_size,0,c_white,1)
 draw_sprite_ext(dragsprite,-1,(window_mouse_get_x()-12*global.ui_size)+1,(window_mouse_get_y()-12*global.ui_size)+1,global.ui_size,global.ui_size,0,c_black,0.5)
 draw_sprite_ext(dragsprite,-1,window_mouse_get_x()-12*global.ui_size,window_mouse_get_y()-12*global.ui_size,global.ui_size,global.ui_size,0,c_white,1)
 if dragstack&gt;=2
 {
  draw_set_color(c_white)
  draw_set_font(global.normalfont)
  draw_set_halign(fa_right)
  draw_set_valign(fa_bottom)
  draw_text_transformed(window_mouse_get_x()-12*global.ui_size+global.ui_size*16,window_mouse_get_y()-12*global.ui_size+global.ui_size*18,dragstack,global.ui_size/2,global.ui_size/2,0)
  draw_set_color(c_black)
 }
}

draw_sprite_ext(spr_mouse_2,0,window_mouse_get_x(),window_mouse_get_y(),global.mouse_size,global.mouse_size,0,c_white,1)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global.walk
if show_inventory=true
{
 if window_mouse_get_x()&gt;=d_width-(global.ui_size*119)
 and window_mouse_get_x()&lt;=d_width-(global.ui_size*21)
 and window_mouse_get_y()&gt;=d_height-(d_height/2)-73*global.ui_size
 and window_mouse_get_y()&lt;=d_height-(d_height/2)+84*global.ui_size
 {
  global.walk=false
 }
  else
 {
  global.walk=true
 }
}
 else
{
 global.walk=true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///test
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
