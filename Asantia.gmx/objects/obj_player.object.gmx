<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player_parent</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state &amp; stats
randomize()
global.player_angle=0
wiggle_anim=0
wiggle=0
n=id
type="player"
attacking=false
follow=false
state=0
image_index=image_number-1
target_x=x
target_y=y+7
scale=1
jump=0
gather=0
//f_mspeed=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///image_xscale
if x&lt;target_x
{
 image_xscale=scale
}
if x&gt;target_x
{
 image_xscale=-scale
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse: states &amp; other
distance=point_distance(x,y,target_x,target_y-7)
//
if global.mode="mouse"
{
 switch(state)
 {
  case 0://normal state
  {
   if attacking=false
   {
    mp_potential_step(target_x,target_y-7,min(global.f_mspeed,distance),false)
   }
    else
   {
    if instance_exists(n)
    {
     mp_potential_step(target_x,target_y-7,min(global.f_mspeed,distance),false)   
    }
   }
   break;
  }
  case 20://gathering
  {
   image_speed=0.01
   break;
  }
 }
}










</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse: sprite &amp; depth (depth general)
if global.mode="mouse"
{
 if state=0
 {
  if point_distance(x,y,target_x,target_y-7)&gt;1
  {
   image_speed=global.f_mspeed/8
   //
   wiggle_anim+=0.10*global.f_mspeed
   wiggle=sin(wiggle_anim)*4
   global.player_angle=wiggle
   //
  }
   else
  {
   image_speed=0.05
   wiggle_anim=0;
   global.player_angle=0;
  }
 }
  else
 {
  image_speed=0.05
  wiggle_anim=0;
  global.player_angle=0;
 }
}

//depth
depth=(y+7)*-1

//follow target
if follow=true and instance_exists(n)
{
 target_x=n.x
 target_y=n.y
}

///jump sprite
if jump=0
{
 sprite_index=spr_player
}
 else
{
 sprite_index=spr_player_jump
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Joystick: states &amp; other

if global.mode="joystick"
{
 switch(state)
 {
  case 0:
  {
   ///movement 
   if gamepad_axis_value(0,gp_axislh)&gt;0
   {
    //
    {
     x+=global.f_mspeed
     target_x=x+global.f_mspeed
     image_speed=global.f_mspeed/8
     wiggle_anim+=0.10*global.f_mspeed
     wiggle=sin(wiggle_anim)*4
     global.player_angle=wiggle 
     image_xscale=1   
    }   
   }
   if gamepad_axis_value(0,gp_axislh)&lt;0
   {
    x-=global.f_mspeed
    target_x=x-global.f_mspeed
    image_speed=global.f_mspeed/8
    wiggle_anim+=0.10*global.f_mspeed
    wiggle=sin(wiggle_anim)*4
    global.player_angle=wiggle  
    image_xscale=-1  
   } 
   if gamepad_axis_value(0,gp_axislv)&gt;0
   {
    y+=global.f_mspeed
    target_y=y+7+global.f_mspeed
    image_speed=global.f_mspeed/8
    wiggle_anim+=0.10*global.f_mspeed
    wiggle=sin(wiggle_anim)*4
    global.player_angle=wiggle    
   }
   if gamepad_axis_value(0,gp_axislv)&lt;0
   {
    y-=global.f_mspeed
    target_y=y+7-global.f_mspeed
    image_speed=global.f_mspeed/8
    wiggle_anim+=0.10*global.f_mspeed
    wiggle=sin(wiggle_anim)*4
    global.player_angle=wiggle    
   }
   //
   if gamepad_axis_value(0,gp_axislv)=0 and gamepad_axis_value(0,gp_axislh)=0
   {
    image_speed=0.05
    wiggle_anim=0;
    global.player_angle=0;
   }
   break;
  }
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse interacting
if global.mode="mouse"
{
 if instance_exists(n)
 {
  //attacking
  if n.type="enemy" and attacking=true
  {
   if point_distance(x,y+7,n.x,n.y)&lt;=global.f_attackrange
   {
    if state=0
    {
     state=1
     obj_weapon_parent.state=1
    }
   }
  }
  //woodcutting
  if n.type="tree" and gather=true and n.cut=false
  {
   if point_distance(x,y+7,n.x,n.y)&lt;=8
   {
    if state=0 and y+7&gt;n.y
    {
     state=20
     g=instance_create(x,y,obj_tool)
     g.gather="woodcutting"
     g.n=n
     g.depth=depth-1
    }
   }
  } 
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move_outside
if instance_place(x,y,all)
{
 move_outside_solid(random(360),10)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>online</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables

//player
gms_self_set("playercolor",global.playercolor)
gms_self_set("player_angle",global.player_angle)
gms_self_set("img_xscale",image_xscale)
gms_self_set("img_yscale",image_yscale)
gms_self_set("img_index",image_index)
gms_self_set("player_eyes",global.player_eyes)

//helm
gms_self_set("helm",obj_helmet.helm)
gms_self_set("back",obj_back.back)
gms_self_set("neck",obj_helmet.neck)


//main hand weapon
gms_self_set("weapon_index",obj_weapon_parent.sprite_index)
gms_self_set("weaponx",obj_weapon_parent.x)
gms_self_set("weapony",obj_weapon_parent.y)
gms_self_set("weapon_angle",obj_weapon_parent.image_angle)
gms_self_set("weapon_xscale",obj_weapon_parent.image_xscale)
gms_self_set("weapon_yscale",obj_weapon_parent.image_yscale)
gms_self_set("weaponstate",obj_weapon_parent.state)
if instance_exists(obj_ringblade) {gms_self_set("shot",obj_ringblade.shot)} else {gms_self_set("shot",false)}









</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move

//
if global.walk=true
{
 if keyboard_check(global.key_attack)
 {
  n=instance_nearest(mouse_x,mouse_y,parent_enemy)
  //
  if collision_circle(mouse_x,mouse_y,50,n,0,1) and obj_weapon_parent.sprite_index!=spr_none
  {
   i=instance_create(mouse_x,mouse_y,obj_move_click)
   follow=true
   i.follow=n
   i.color=c_red
   i.sprite_index=spr_move_click_2
   attacking=true
   gather=false
  }
 }
  else
 {
  //
  n=instance_nearest(mouse_x,mouse_y,parent_interact)
  if collision_circle(mouse_x,mouse_y,10,n,0,1)
  {
   i=instance_create(mouse_x,mouse_y,obj_move_click)
   i.follow=n
   follow=true
   //
   if n.type="enemy"
   {
    if obj_weapon_parent.sprite_index!=spr_none
    {
     i.color=c_red
     i.sprite_index=spr_move_click_2
     attacking=true
     gather=false
    }
    else
      {
       i.color=c_white
       attacking=false
       gather=false
       follow=false
      } 
   }
   if n.type="tree" and n.cut=false
   {
    i.color=c_lime
    i.sprite_index=spr_move_click_2
    attacking=false
    gather=true
   }
   if n.type="dead"
   {
    i.color=c_white
    attacking=false
    gather=false
    follow=false
   }
  }
  else
  {
   if point_distance(x,y+7,mouse_x,mouse_y)&gt;=10
   {
    attacking=false
    follow=false
    gather=false
    target_x=mouse_x
    target_y=mouse_y
    with (instance_create(mouse_x,mouse_y,obj_move_click))
    {
     color=c_white
     follow=id
    }
   }
  }
 } 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw_self
if global.debug=true
{
 draw_set_color(c_white)
 draw_line(x,y+7,target_x,target_y)
 draw_ellipse(target_x-4,target_y-1,target_x+4,target_y+1,1)
 draw_set_halign(fa_center)
 draw_set_valign(fa_center)
 draw_text(x,y+17,global.irl_time)
 draw_set_alpha(0.05)
 draw_set_color(c_red)
 draw_circle(x,y,global.f_attackrange,0)
 draw_set_alpha(1)
 draw_set_color(c_black)
}

draw_sprite_ext(sprite_index,image_index,x,y-jump,image_xscale,image_yscale,global.player_angle,global.playercolor,global.playeralpha)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,6</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
